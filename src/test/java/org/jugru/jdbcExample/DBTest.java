package org.jugru.jdbcExample;import org.jugru.jdbcExample.dao.UserDAO;import org.jugru.jdbcExample.dao.UserDAOImpl;import org.jugru.jdbcExample.model.User;import org.jugru.jdbcExample.util.DBManager;import org.junit.jupiter.api.AfterAll;import org.junit.jupiter.api.BeforeAll;import org.junit.jupiter.api.BeforeEach;import org.junit.jupiter.api.Test;import java.sql.Connection;import java.util.ArrayList;import java.util.List;import java.util.Map;import java.util.function.Function;import java.util.stream.Collectors;import static org.junit.jupiter.api.Assertions.assertEquals;import static org.junit.jupiter.api.Assertions.assertTrue;public class DBTest {    private static Connection connection;    static {        connection = DBManager.createNewConnection();    }    @BeforeAll    public static void initDB() {        DBManager.start();    }    @AfterAll    public static void killDB() {        DBManager.stop();    }    @BeforeEach    public void initTables() {        UserDAO uDao = new UserDAOImpl(connection);        uDao.initTable();    }    @Test    public void testUserDAO() {        UserDAO uDao = new UserDAOImpl(connection);        List<User> toSave = new ArrayList<>();        toSave.add(User.builder().name("Vasya").enabled(true).build());        toSave.add(User.builder().name("Petya").enabled(true).build());        toSave.add(User.builder().name("Alice").enabled(false).build());        toSave.forEach(uDao::create);        Map<String, User> map = toSave.stream()                .collect(Collectors.toMap(User::getName, Function.identity()));        uDao.getAll().forEach( u-> {            assertTrue(map.containsKey(u.getName()), "Fail to find user in users from DB");            User fromMem = map.get(u.getName());            fromMem.setId(u.getId());            assertEquals(u, fromMem, String.format("Users %s and %s are not equals but have same  id", u, fromMem));        });    }}