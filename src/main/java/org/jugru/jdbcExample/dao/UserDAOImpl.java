package org.jugru.jdbcExample.dao;import org.jugru.jdbcExample.dao.executor.ParameterHolder;import org.jugru.jdbcExample.dao.executor.QueryExecutor;import org.jugru.jdbcExample.model.User;import org.jugru.jdbcExample.util.exceptions.DBException;import java.sql.Connection;import java.sql.Types;import java.util.ArrayList;import java.util.Arrays;import java.util.List;public class UserDAOImpl implements UserDAO {    private final QueryExecutor executor;    public UserDAOImpl(Connection connection) {        executor = new QueryExecutor(connection);    }    @Override    public void create(User user) {                int updated = executor.execUpdate("INSERT INTO users VALUES (NULL, ?, ?);", Arrays.asList(                new ParameterHolder(1, user.getName(), Types.VARCHAR),                new ParameterHolder(2, user.isEnabled(), Types.BOOLEAN)));        if (updated == 0) {            throw new DBException(String.format("Creating user failed for user %s", user));        }    }    @Override    public User get(long id) {        String sql = String.format("SELECT * FROM users u WHERE u.id=%d", id);        List<User> users = selectFromUserTable(sql);        if (users.isEmpty()) {            return null;        }        return users.get(0);    }    @Override    public List<User> getAll() {        return selectFromUserTable("SELECT * FROM users");    }    private List<User> selectFromUserTable(String sql) {        return executor.execQuery(sql, rs -> {            List<User> result = new ArrayList<>();            System.out.println(rs);            while (rs.next()) {                result.add(User.builder()                        .id(rs.getLong("id"))                        .name(rs.getString("name"))                        .enabled(rs.getBoolean("enabled"))                        .build());            }            return result;        });    }    @Override    public void initTable() {        executor.execUpdate("DROP TABLE IF EXISTS users;");        executor.execUpdate("CREATE TABLE users\n" +                "(\n" +                "    `id`      BIGINT(20)   NOT NULL AUTO_INCREMENT,\n" +                "    `name`    VARCHAR(300) NOT NULL CHECK (`name` <> ''),\n" +                "    `enabled` BOOL DEFAULT TRUE,\n" +                "\n" +                "\n" +                "    PRIMARY KEY (`id`)\n" +                ");");    }}